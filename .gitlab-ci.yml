################################################################################
#
#  This file is part of SplashSync Project.
#
#  Copyright (C) Splash Sync <www.splashsync.com>
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
#  For the full copyright and license information, please view the LICENSE
#  file that was distributed with this source code.
#
#  @author Bernard Paquier <contact@splashsync.com>
#
################################################################################

################################################################
# Include Pipeline Templates
include:
  - remote: 'https://raw.githubusercontent.com/BadPixxel/Php-Sdk/main/gitlab/pages.yaml'

################################################################
# Set any variables we need
variables:
  COMPOSER_MEMORY_LIMIT:  -1
  SHOPIFY_API_SECRET:     ThisTokenIsNotUsed

################################################################
# Defined Pipeline Stages
stages:
  - Tests
  - Docker
  - Builds

################################################################
# Functional Tests
################################################################
tests:
#    when:       manual
    image:      registry.gitlab.com/badpixxel-projects/php-sdk:php-8.1
    stage:      Tests
    tags:       ['Dedicated']
    retry:      2
    before_script:
        ################################################################################
        # Install Symfony
        - composer update
    ################################################################################
    # Run Test Script
    script:
        # Execute Grumphp Testsuite
        - wall-e grumphp:quality
        - wall-e grumphp:stan
    ################################################################################
    # Run After Script
    after_script:
        - curl -s https://raw.githubusercontent.com/BadPixxel/Php-Sdk/main/ci/after.sh | sh

################################################################
# Build Docker Alpine Image for Docker Hub
################################################################
docker-alpine-docker-hub:
    stage:      Docker
    image:      jdrouet/docker-with-buildx
    tags:       ['Dedicated-Docker']
    services:
        - docker:dind
    before_script:
        - docker info
    script:
        - echo "[$CI_JOB_NAME] Build & Upload Docker Alpine Image"
        ################################################################
        # Connect Docker to DockerHub
        - docker login -u splashsync -p $DOCKER_HUB_TOKEN
        ################################################################
        # Build Docker Image
        - docker buildx create --use
        - docker buildx build ./ -t splashsync/toolkit:alpine --platform linux/amd64,linux/arm64 --push
    except:
        - schedules

################################################################
# Build Docker Images for Testing
################################################################
docker:
#     when:       manual
    stage:      Docker
    image:      docker:stable
    tags:       ['Dedicated-Docker']
    services:
        - docker:dind
    before_script:
        - docker info
    script:
        - echo "Build & Upload Docker Image"
        # Build & Upload Splash All Docker Images
        - docker build --no-cache -t splashsync/toolkit:latest  ./
        # Connect Docker to DockerHub
        - docker login -u splashsync -p $DOCKER_HUB_TOKEN
        - docker push splashsync/toolkit:latest
    except:
        - schedules

################################################################
# Build Docker Alpine Image for Gitlab
################################################################
docker-alpine-gitlab:
    stage:      Docker
    image:      jdrouet/docker-with-buildx
    tags:       ['Dedicated-Docker']
    services:
      - docker:dind
    before_script:
      - docker info
    script:
      - echo "[$CI_JOB_NAME] Build & Upload Docker Alpine Image"
      ################################################################
      # Connect Docker to GitLab Registry
      - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
      ################################################################
      # Build Docker Image
      - docker buildx create --use
      - docker buildx build ./ -t registry.gitlab.com/splashsync/toolkit:alpine --platform linux/amd64,linux/arm64 --push
#      ################################################################
#      # Build Docker Image
#      - docker build --no-cache -t registry.gitlab.com/splashsync/toolkit:alpine  ./
#      ################################################################
#      # Push to GitLab Registry
#      - docker push registry.gitlab.com/splashsync/toolkit:alpine
    except:
      - schedules
